openapi: 3.0.0
info:
  version: '1.0'
  title: Empo News
  description: 'This is the Open API documentation for the REST API of **Empo News** deployed at <https://empo-news.herokuapp.com/>. <br>All operations are executable. All operations requere authentication. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the account.'
servers:
    - url: 'https://empo-news.herokuapp.com/api/v1'
paths:
    /contributions:
        post:
            summary: Adds a new Contribution
            operationId: createContribution
            tags:
                - contributions
            requestBody:
                description: Provide the author & content of the new Tweet
                content:
                    application/json:
                        schema:
                            required:
                            - title
                            - url
                            - text
                            type: object
                            properties:
                                title:
                                    type: string
                                    minLenght: 4
                                    maxLenght: 2000
                                    example: 'This is my first contribution'
                                url:
                                    type: string
                                    nullable: true
                                    format: url
                                    maxLength: 500
                                    example: 'https://google.com'
                                text:
                                    type: string
                                    nullable: true
                                    maxLength: 500
                                    example: "Hello Wordl!"
                required: true
            responses:
                201:
                    description: Contribution created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AddContributionResult'
                404:
                    description: 'Error: Not Found'
                    content:
                        aplication/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                errorExample:
                                    $ref: '#/components/examples/error404'
        get:
            summary: Retrieves all the contributions
            operationId: listContribution
            tags:
                - contributions
            responses:
                200:
                  description: List of all contributions
                  content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/Contribution'
                500:
                  description: 'Error: Internal server error'
                  content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
                        examples:
                            errorExample:
                                $ref: '#/components/examples/error500'
    /contribution/{contributionId}:
        get:
            summary: Finds a contribution by its ID
            operationId: getContributionById
            tags:
                - contributions
            description: Returns a single Contribution
            parameters:
              - name: contributionId
                in: path
                required: true
                description: ID of the contribution to return
                schema:
                    type: integer
                    format: int64
            responses:
                200:
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Contribution'
                404:
                    description: 'Error: Not Found'
                    content:
                        aplication/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                errorExample:
                                    $ref: '#/components/examples/error404'
        delete:
            summary: Deletes a Contribution
            operationId: deleteContribution
            tags:
                - contributions
            parameters:
              - name: contributionId
                in: path
                required: true
                description: ID of the contribution to return
                schema:
                    type: integer
                    format: int64
            responses:
                204:
                    description: Contribution deleted
                    content:
                        application/json: {}
                404:
                    description: 'Error: Not found'
                    content:
                        aplication/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                errorExample:
                                    $ref: '#/components/examples/error404'
                401:
                    description: 'Error: Unauthorized'
                    content:
                        aplication/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                errorExample:
                                    $ref: '#/components/examples/error401'
                403:
                    description: 'Error: Forbidden'
                    content:
                        aplication/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                            examples:
                                errorExample:
                                    $ref: '#/components/examples/error403'
components:
    schemas:
        User:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    example: 1
                username:
                    type: string
                    maxLenght: 150
                    example: 'John'
                first_name:
                    type: string
                    maxLenght: 30
                    example: 'Doe'
                last_name:
                    type: string
                    maxLenght: 150
                    example: 'García'
                password:
                    type: string
                    format: password
                    minLenght: 8
                    maxLenght: 128
                    example: 'asndqw23qDS'
                email:
                    type: string
                    format: email
                    maxLenght: 254
                    example: 'john.doe@mail.com'
                date_joined:
                    type: string
                    format: date-time
                    example: '2020-04-16 22:41:09.025719'
        Contribution:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    example: 1
                title:
                    type: string
                    minLenght: 4
                    maxLenght: 2000
                    example: 'This is my first contribution'
                points:
                    type: integer
                    format: int32
                    default: 1
                    example: 3
                publication_time:
                    type: string
                    format: date-time
                    example: '2020-04-16 22:18:21.208736'
                url:
                    type: string
                    nullable: true
                    format: url
                    maxLength: 500
                    example: 'https://google.com'
                text:
                    type: string
                    nullable: true
                    maxLength: 500
                    example: "Hello Wordl!"
                comments:
                    type: integer
                    format: int32
                    default: 0
                    example: 3
                user_id:
                    type: integer
                    format: int64
                    example: 2
                liked:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                hidden:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        AddTweetResult:
            type: object
                properties:
                    new_tweet:
                        $ref: '#/components/schemas/Contribution'
                    api_key:
                        type: string
                        example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
        Error:
            type: object
            properties:
                status:
                    type: integer
                    enum: [400, 401, 403, 404, 409, 500]
                error: 
                    type: string
                    enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict", "Internal Server Error"]
                message: 
                    type: string
    examples:
        error400:
            value:
                status: 400
                error: "Bad Request"
                message: "Content is too long (maximum is 500 characters)"
        error401:
            value:
                status: 401
                error: "Unauthorized"
                message: "You provided no api key (X-API-KEY Header)"
        error403:
            value:
                status: 403
                error: "Forbidden"
                message: "Your api key (X-API-KEY Header) is not valid"
        error404:
            value:
                status: 404
                error: "Not Found"
                message: "No Tweet with that ID"
        error500:
            value:
                status: 500
                error: "Internal Server Error"
                message: "There was an error when retrieving the data"
    securitySchemes:
        ApiKeyAuth:
            type: apiKey
            name: X-API-KEY #Custom headers in rails apps must have the X- prefix
            in: header